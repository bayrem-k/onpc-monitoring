// netstat_alert_stream

// metric: 'tcp_established'
// available_fields:  "tcp_close","tcp_close_wait","tcp_closing","tcp_established","tcp_fin_wait1","tcp_fin_wait2","tcp_last_ack","tcp_listen","tcp_none","tcp_syn_recv","cp_syn_sent","tcp_time_wait","udp_socket","tcp_listen"

// TELEGRAF CONFIGURATION
// [[inputs.netstat]]

// DEFINE: kapacitor define netstat_alert_stream -type stream -tick netstat/netstat_alert_stream.tick -dbrp telegraf.autogen
// ENABLE: kapacitor enable netstat_alert_stream

// Parameters
dbrp "telegraf"."autogen"

var infoSig = 3 
var warnSig = 6
var critSig = 12
var period = 5m
var every = 5m 

// Dataframe
var data = stream
  |from()
    .database('telegraf')
    .retentionPolicy('autogen')
    .measurement('netstat')
    .groupBy('region','host')
  |window()
    .period(period)
    .every(every)
  |mean('tcp_established')
    .as('stat')

// Thresholds
var alert = data
  |eval(lambda: sigma("stat"))
    .as('sigma')
    .keep()
  |alert()
    .id('{{ index .Tags "region" }}/{{ index .Tags "host" }}/netstat')
    .message('{{ .ID }}: [{{ .Level }}] TCP connections avg={{ index .Fields "stat" }},  stddev={{ index .Fields "sigma" | printf "%0.2f" }}')
    .info(lambda: "sigma" >= infoSig)
    .warn(lambda: "sigma" >= warnSig)
    .crit(lambda: "sugma" >= critSig)
    .topic('system')
    .log('/tmp/netstat_alert_stream_log.txt')

